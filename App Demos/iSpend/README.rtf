{\rtf1\ansi\ansicpg1252\cocoartf1016\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset204 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 iSpend
\b0\fs24 \
\
This example uses a simple expense tracking application to demonstrate a number of Cocoa features. It shows pasteboard handling, including copy and paste, drag and drop, and providing and using services. It shows you how to add NSDatePicker and NSViewAnimation to your application. It also illustrates how to enhance sorting support in a table view and how to add undo support, both using bindings. It takes advantage of Objective-C 2 language features such as properties. Lastly, this example demonstrates the addition of a search field to the toolbar, and a Spotlight search window.\
\
First version of iSpend was demonstrated at WWDC 2005, as a part of the "Cocoa Tiger Makeover" presentation.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\fs28 \cf0 Copy and Paste
\fs24 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0 \cf0 * MyDocument_Pasteboard.h and MyDocument_Pasteboard.m have support for pasteboard handling in the recommended style.  Pasteboard handling is managed by the document in this particular example. In a more complex example, with multiple windows per document, it might be managed by the window controller (or in examples with custom views, by the view), using its information about selections, perhaps relying on the document for support in translating to and from pasteboard formats.\
\
* The formats supported are:  the application's custom pasteboard format, kSpendDocumentType; files, represented by NSFilenamesPboardType; rich text, represented by NSRTFPboardType; and plain text, represented by NSStringPboardType. Of these, the only type written lazily is NSFilenamesPboardType, primarily in support of promise drags; to support these, NSFilesPromisePboardType is written to the pasteboard immediately, and NSFilenamesPboardType on demand.\
\
* The custom pasteboard type is written to and read from the pasteboard as archived data. Plain text is written to and read from the pasteboard as tab-separated values, although the read side is flexible enough to also handle comma- or return-separated values. Rich text is written to and read from the pasteboard as text tables (new for Tiger), although the read side also supports the same formats as in the plain text case, if no table is present.\
\
* The organization of the methods (writablePasteboardTypes, writeSelectionToPasteboard:types:, writeSelectionToPasteboard:type:, and readablePasteboardTypes, readSelectionFromPasteboard:, readSelectionFromPasteboard:type:) is the style recommended with an eye toward making support for drag and drop and services straightforward.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 Drag and Drop\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 * Drag and drop support is added using NSTableView data source methods available in Tiger or later, which make it unnecessary to subclass NSTableView. For this reason the drag and drop support is added to the array controller, TransactionsController. The actual handling of the pasteboard is performed by the document, using the methods described above.\
\
* Because items in the table view are regarded in this application as being arranged by sorting rather than by manual rearrangement, the drag and drop operation supported is a copy, whether the user leaves the drag as generic or explicitly chooses a copy. For similar reasons, the visual indication of the drag is always placed at the end of the table. For drags from a given table view to itself, however, the drag is refused unless the user explicitly chooses a copy, so as to prevent inadvertent duplication.\
\
* Promise drags are explicitly supported using the new NSTableView data source method tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:. This allows us to create files lazily on demand, at a location specified by the recipient. This is particularly intended for drags to the desktop or to the Finder.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\fs28 \cf0 Services\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 * The application acts both as a services consumer, and as a services provider (with two services, "Add to iSpend" and "Copy from iSpend"). The -[MyDocument init] does a one-time-only registration of the pasteboard types handled for services consumption, and of the document class as a services provider.\
\
* The critical services consumer methods writeSelectionToPasteboard:types: and readSelectionFromPasteboard: were already implemented as part of pasteboard handling as described above. The only additional method required for services consumption support is the validation method validRequestorForSendType:returnType:, which is implemented again at the document level.\
\
* The Info.plist has an NSServices entry, describing the two services that are provided. To implement these, the corresponding methods, importData:userData:error: and exportData:userData:error:, are implemented on the services provider, the document class.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 NSDatePicker
\fs24 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0 \cf0 * The BankTransactionView and StockTransactionView in 
\b MyDocument.nib
\b0  use NSDatePickers to display dates. The "Date" NSDatePicker in BankTransactionView and the "Sale Date" NSDatePicker in StockTransactionView are bound to TransactionsController.selection.date.  \
\
* The "Choose Date" utility window contains a Graphical style NSDatePicker. This Graphics style NSDatePicker is also bound to TransactionsController.selection.date. This binding allows the user to update the date of a transaction by using either style of NSDatePicker.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 Sorting\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 This section shows how to use bindings to improve the sorting support provided by NSArrayController.\
\
* 
\b TransactionsController_Sorting.m 
\b0 implements the sorting support.  \
* bind:toObject:withKeyPath:options: is overridden in order to register the TransactionsController instance as an observer of the keyPath to which its contentArray is bound. This causes observeValueForKeyPath:ofObject:change:context: to be invoked whenever one or more transactions are added or removed, with the context we specified (@"TransactionsController.transactions"). If transactions have been added, a call to rearrangeObjects is scheduled (but deferred to coalesce calls). updateObservationForOldTransactions:newTransactions: is called to stop observing key paths in transactions that have been removed, and to start observing key paths in transactions that have been added. The key paths observed correspond to the keys for TransactionsController's current sort descriptors. This in turn causes observeValueForKeyPath:ofObject:change:context: to be invoked with the context we specify ("TransactionsController.sort"), whenever a value for one of the observed (sorted) keyPaths changes in a transaction.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 Undo\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 This section shows how to use bindings to implement invocation-based undo on the transactions array in the document, and how to use simple undo for the values of each transaction.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 * observeValueForKeyPath:ofObject:change:context: in
\b  MyDocument.m 
\b0 prepares invocation-based undo for adding or removing transactions. MyDocument is set up as an observer of the transactions keyPath, which causes observeValueForKeyPath... to be invoked whenever one or more transactions are added or removed. We get the array of removed transactions from the change dictionary and prepare an invocation-based undo to add those transactions back to the transactions array at their current indexes. We also get the array of added transactions and prepare an invocation-based undo to remove those transactions from the transactions array. We also call setDocument:self on each added transaction so that each transaction can find the document's undoManager.\
* setOpeningBalance: prepares an invocation-based undo to restore the previous balance.\
* the setter accessors in 
\b Transaction.m 
\b0 use simple or invocation-based undo to restore fields to their previous values.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 NSViewAnimation\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 * updateView in 
\b ExpandableViewController.m 
\b0 uses NSViewAnimation to fade out a disappearing view, to resize the window, and to fade in an appearing view. The view shown can change when a disclosure triangle is toggled, or when the transaction type property of the current transaction changes. View and window frame calculations are done so that the view and window appear anchored in the upper left.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\fs28 \cf0 Toolbar Search Field
\b0\fs24 \
\
This sections shows how to add a search field to the toolbar.\
\
* The MyDocument.nib file has an NSCustomView in it named SearchView.\
* The SearchView has an NSSearchField on it.\
* An outlet named 
\b searchFieldOutlet
\b0  hooks up the 
\i File's Owner 
\i0 to the NSSearchField\
* The NSSearchField has two bindings for 
\b predicate:\
	
\b0 * The first is for filtering on "Description" and has a predicate format of "descriptionString contains[c] $value"\
	* The second is for filtering on "Category" and has a predicate format of "type contains[c] $value"\
* The MyDocument_Toolbar.m has code that adds the search toolbar. In particular, 
\b setView 
\b0 is used to setup the custom view.\
\

\b\fs28 Spotlight Search Window\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 This sections shows how to use a spotlight-like search window. You must also build and install the 
\b iSpendPlugin
\b0  example in order for the iSpend document format to be understood by Spotlight.\
\
* SearchController.h uses an NSMetdataQuery to perform searches\
* In SearchPanel.nib, the NSSearchField has a binding for 
\b value 
\b0 set to 
\b searchKey
\b0 \
* When the 
\b searchKey
\b0  changes, 
\b createSearchPredicate 
\b0 is called. This uses several 
\b NSPredicates
\b0  to perform a search on the text content for only iSpend files.\
* The 
\b NSArrayController
\b0  has its 
\b contentArray
\b0  bound to 
\b query.results
\b0  in the  "File's Owner". The 
\b query.results 
\b0 is an NSArray of 
\b NSMetdataItems
\b0 .\
* The 
\b NSMetdataItems
\b0  allow binding to any metadata attributes.\
* The 
\b File Name 
\b0 table column has the 
\b value 
\b0 bound to kMDItemFSName in the 
\b arrangedObjects 
\b0 for the 
\b NSArrayController.\

\b0 * The 
\b Balance 
\b0 table column has the 
\b value 
\b0 bound to the custom attribute 
\b com_apple_ispendBalance 
\b0 in the 
\b arrangedObjects 
\b0 for the 
\b NSArrayController
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\fs28 \cf0 Properties\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0\fs24 \cf0 This section shows how to use the new Objective-C 2 
\b @property
\b0  construct to declare properties for a class.\
\
* Transaction.h does not directly declare any instance variables for the 
\b Transaction
\b0  class. Instead, it describes the attributes of the class using the new Objective-C 2 
\b @property
\b0  construct.\
* Properties of an instance can be accessed using dot notation as if they were members of a structure, for example:\
\
    Transaction *transaction = [[Transaction alloc] init];\
    transaction.amount = 1.0;\
    double value = transaction.amount;\
\
* Properties of a class must be accessed within the instance methods of that class with a "self." prefix, for example:\
\
    double value = self.amount;\
    self.amount = value + 1.0;\
\
* Any access to a property will invoke the appropriate getter and setter methods.\
* Unless they are overridden within a class, property getter and setter methods are generated automatically that perform appropriate memory management.\
* All properties but 
\b undoManager
\b0  are declared with the "ivar" attribute. This causes them to have a corresponding instance variable in the 
\b Transaction
\b0  class, named the same as the property but with a preceding underscore. Thus the property 
\b amount
\b0  has a corresponding instance variable 
\b _amount
\b0 .\
* The 
\b undoManager
\b0  property lacks an "ivar" attribute and is declared with the "readonly" attribute. The compiler will generate an error attempting to assign to the property, and the property must have a corresponding getter method defined.\
* The 
\b descriptionString
\b0 , 
\b type
\b0 , and 
\b accountType
\b0  properties are declared with the "bycopy" attribute indicating that a copying setter method must be generated or written. Properties of object types can be either "byref" (the default) or "bycopy" to indicate the type of memory management the property should perform. Attributes whose type is a class that has a mutable subclass such as NSString should typically have the "bycopy" attribute specified, consistent with traditional Cocoa memory management.\
* Several of the properties declared by 
\b Transaction
\b0  have overridden getter and setter methods to perform additional logic. In particular, the 
\b document
\b0  property has an overridden setter 
\b -setDocument:
\b0  that does not perform a retain, indicating that the property represents a "weak" reference to avoid a retain cycle.\
* Properties can be observed and bound to.\
}